name: Maintenance and Monitoring

on:
  schedule:
    # Daily health checks at 6 AM UTC
    - cron: '0 6 * * *'
    # Weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        type: choice
        options:
          - health-check
          - security-scan
          - performance-test
          - cleanup-logs
          - backup-data
          - update-dependencies

env:
  AWS_DEFAULT_REGION: us-east-1
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'

jobs:
  # Health Check for all environments
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 * * *' || github.event.inputs.task == 'health-check'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Check API health
        id: api-health
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name adaptive-quiz-app-${{ matrix.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          
          if [ "$API_ENDPOINT" != "None" ]; then
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_ENDPOINT/health" || echo "000")
            echo "status=$HTTP_STATUS" >> $GITHUB_OUTPUT
            echo "endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ API health check passed for ${{ matrix.environment }}"
            else
              echo "❌ API health check failed for ${{ matrix.environment }} (Status: $HTTP_STATUS)"
              exit 1
            fi
          else
            echo "⚠️ No API endpoint found for ${{ matrix.environment }}"
          fi

      - name: Check DynamoDB health
        run: |
          TABLES=$(aws dynamodb list-tables \
            --query 'TableNames[?starts_with(@, `adaptive-quiz-app-${{ matrix.environment }}`)]' \
            --output text)
          
          if [ -n "$TABLES" ]; then
            for table in $TABLES; do
              STATUS=$(aws dynamodb describe-table \
                --table-name "$table" \
                --query 'Table.TableStatus' \
                --output text)
              
              if [ "$STATUS" = "ACTIVE" ]; then
                echo "✅ DynamoDB table $table is healthy"
              else
                echo "❌ DynamoDB table $table is not active (Status: $STATUS)"
                exit 1
              fi
            done
          else
            echo "⚠️ No DynamoDB tables found for ${{ matrix.environment }}"
          fi

      - name: Check CloudWatch alarms
        run: |
          ALARMS=$(aws cloudwatch describe-alarms \
            --alarm-name-prefix "adaptive-quiz-app-${{ matrix.environment }}" \
            --state-value ALARM \
            --query 'MetricAlarms[].AlarmName' \
            --output text)
          
          if [ -n "$ALARMS" ]; then
            echo "❌ Active alarms found in ${{ matrix.environment }}:"
            echo "$ALARMS"
            exit 1
          else
            echo "✅ No active alarms in ${{ matrix.environment }}"
          fi

      - name: Report health status
        if: always()
        run: |
          if [ "${{ steps.api-health.outputs.status }}" = "200" ]; then
            echo "📊 Health check summary for ${{ matrix.environment }}:"
            echo "- API: ✅ Healthy (Status: ${{ steps.api-health.outputs.status }})"
            echo "- DynamoDB: ✅ All tables active"
            echo "- CloudWatch: ✅ No active alarms"
          else
            echo "🚨 Health check failed for ${{ matrix.environment }}"
          fi

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * 0' || github.event.inputs.task == 'security-scan'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit[toml] safety semgrep
          npm install -g retire snyk

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt

      - name: Check for vulnerable dependencies (Python)
        run: |
          safety check --json --output safety-report.json
          safety check

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json
          semgrep --config=auto src/

      - name: Frontend security scan
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate
          retire --path=. --outputformat=json --outputpath=retire-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            frontend/retire-report.json
          retention-days: 30

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'performance-test'
    strategy:
      matrix:
        environment: [staging, prod]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install performance testing tools
        run: |
          pip install locust requests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Get API endpoint
        id: api
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name adaptive-quiz-app-${{ matrix.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          echo "endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Run performance tests
        run: |
          # Create a simple locust test
          cat > locustfile.py << 'EOF'
          from locust import HttpUser, task, between
          
          class QuizUser(HttpUser):
              wait_time = between(1, 3)
              
              @task
              def health_check(self):
                  self.client.get("/health")
              
              @task
              def auth_login(self):
                  self.client.post("/auth/login", json={
                      "email": "test@example.com",
                      "password": "testpassword"
                  })
          EOF
          
          # Run locust for 2 minutes with 10 users
          locust --host=${{ steps.api.outputs.endpoint }} \
                 --users=10 \
                 --spawn-rate=2 \
                 --run-time=2m \
                 --headless \
                 --html=performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report-${{ matrix.environment }}
          path: performance-report.html
          retention-days: 7

  # Log cleanup
  cleanup-logs:
    name: Cleanup Logs
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'cleanup-logs'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    environment: ${{ matrix.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Cleanup old log streams
        run: |
          LOG_GROUPS=$(aws logs describe-log-groups \
            --log-group-name-prefix "/aws/lambda/adaptive-quiz-app-${{ matrix.environment }}" \
            --query 'logGroups[].logGroupName' \
            --output text)
          
          for log_group in $LOG_GROUPS; do
            echo "Cleaning up old log streams in $log_group"
            
            # Get log streams older than 30 days
            CUTOFF_TIME=$(($(date +%s) * 1000 - 30 * 24 * 60 * 60 * 1000))
            
            OLD_STREAMS=$(aws logs describe-log-streams \
              --log-group-name "$log_group" \
              --query "logStreams[?lastEventTime < \`$CUTOFF_TIME\`].logStreamName" \
              --output text)
            
            for stream in $OLD_STREAMS; do
              echo "Deleting log stream: $stream"
              aws logs delete-log-stream \
                --log-group-name "$log_group" \
                --log-stream-name "$stream" || true
            done
          done

  # Data backup
  backup-data:
    name: Backup Data
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'backup-data'
    strategy:
      matrix:
        environment: [staging, prod]
    environment: ${{ matrix.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Create DynamoDB backups
        run: |
          TABLES=$(aws dynamodb list-tables \
            --query 'TableNames[?starts_with(@, `adaptive-quiz-app-${{ matrix.environment }}`)]' \
            --output text)
          
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          for table in $TABLES; do
            echo "Creating backup for table: $table"
            
            aws dynamodb create-backup \
              --table-name "$table" \
              --backup-name "${table}-backup-${TIMESTAMP}" \
              --output table
          done

      - name: Export analytics data
        run: |
          # Export recent analytics data to S3
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name adaptive-quiz-app-${{ matrix.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DataS3BucketName`].OutputValue' \
            --output text)
          
          if [ "$BUCKET_NAME" != "None" ]; then
            echo "Exporting analytics data to S3 bucket: $BUCKET_NAME"
            
            # Create export job for DynamoDB table to S3
            ANALYTICS_TABLE="adaptive-quiz-app-${{ matrix.environment }}-analytics"
            EXPORT_TIME=$(date +%Y%m%d-%H%M%S)
            
            aws dynamodb export-table-to-point-in-time \
              --table-arn "arn:aws:dynamodb:${{ env.AWS_DEFAULT_REGION }}:$(aws sts get-caller-identity --query Account --output text):table/$ANALYTICS_TABLE" \
              --s3-bucket "$BUCKET_NAME" \
              --s3-prefix "exports/analytics-$EXPORT_TIME/" \
              --export-format JSON
          fi

  # Dependency updates
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'update-dependencies'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update Python dependencies
        run: |
          pip install pip-tools
          pip-compile --upgrade requirements.in
          
          # Check for security vulnerabilities
          pip install safety
          safety check -r requirements.txt

      - name: Update Node.js dependencies
        run: |
          npm update
          npm audit fix

      - name: Update frontend dependencies
        working-directory: ./frontend
        run: |
          npm update
          npm audit fix

      - name: Create pull request for dependency updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated dependency updates'
          body: |
            This PR contains automated dependency updates:
            
            - Updated Python dependencies
            - Updated Node.js dependencies
            - Fixed security vulnerabilities
            
            Please review and test before merging.
          branch: automated/dependency-updates
          delete-branch: true

  # Cost monitoring
  cost-monitoring:
    name: Cost Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 * * *'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Get cost and usage data
        run: |
          # Get current month costs
          START_DATE=$(date -d "$(date +%Y-%m-01)" +%Y-%m-%d)
          END_DATE=$(date +%Y-%m-%d)
          
          echo "Getting cost data from $START_DATE to $END_DATE"
          
          aws ce get-cost-and-usage \
            --time-period Start=$START_DATE,End=$END_DATE \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --query 'ResultsByTime[0].Groups[?Metrics.BlendedCost.Amount > `1.0`]' \
            --output table

      - name: Check budget alerts
        run: |
          # Check if any budgets are close to threshold
          aws budgets describe-budgets \
            --account-id $(aws sts get-caller-identity --query Account --output text) \
            --query 'Budgets[?BudgetName == `adaptive-quiz-app-*`]' \
            --output table