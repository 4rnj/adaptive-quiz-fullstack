service: adaptive-quiz-app
frameworkVersion: '4'

custom:
  # Environment-specific configurations
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  owner: adaptive-quiz-team
  
  # Cost center configuration
  costCenter:
    dev: development
    staging: development
    prod: production
  
  # Logging configuration
  logLevel:
    dev: DEBUG
    staging: INFO
    prod: WARN
  
  # Lambda performance configuration
  lambdaMemory:
    dev: 256
    staging: 512
    prod: 1024
  
  lambdaTimeout:
    dev: 30
    staging: 60
    prod: 300
  
  # Scheduled functions
  scheduledFunctions:
    dev: false
    staging: true
    prod: true
  
  # Python requirements
  pythonRequirements:
    dockerizePip: true
    layer: true
    slim: true
    strip: false
    noDeps:
      - boto3
      - botocore
    pipCmdExtraArgs:
      - --no-cache-dir
    pythonBin: python3.13
  
  # DynamoDB configuration
  dynamodb:
    prefix: ${self:service}-${self:custom.stage}
    capacityMode: ${self:custom.dynamodbCapacity.${self:custom.stage}}
    readCapacity: ${self:custom.dynamodbReadCapacity.${self:custom.stage}}
    writeCapacity: ${self:custom.dynamodbWriteCapacity.${self:custom.stage}}
  
  dynamodbCapacity:
    dev: provisioned
    staging: provisioned
    prod: on-demand
  
  dynamodbReadCapacity:
    dev: 5
    staging: 10
    prod: 25
  
  dynamodbWriteCapacity:
    dev: 5
    staging: 10
    prod: 25
  
  # Auto-scaling configuration
  autoScaling:
    enabled: ${self:custom.autoScalingEnabled.${self:custom.stage}}
    minCapacity: ${self:custom.autoScalingMin.${self:custom.stage}}
    maxCapacity: ${self:custom.autoScalingMax.${self:custom.stage}}
    targetUtilization: 70
  
  autoScalingEnabled:
    dev: false
    staging: true
    prod: true
  
  autoScalingMin:
    dev: 5
    staging: 10
    prod: 25
  
  autoScalingMax:
    dev: 20
    staging: 100
    prod: 500
  
  # Cognito configuration
  cognito:
    userPoolName: ${self:service}-${self:custom.stage}-user-pool
  
  cognitoCallbacks:
    dev: http://localhost:5173/auth/callback
    staging: https://staging.adaptivequiz.com/auth/callback
    prod: https://adaptivequiz.com/auth/callback
  
  cognitoLogouts:
    dev: http://localhost:5173/auth/logout
    staging: https://staging.adaptivequiz.com/auth/logout
    prod: https://adaptivequiz.com/auth/logout
  
  # API Gateway configuration
  apiName: ${self:service}-${self:custom.stage}-api
  
  # Alerting configuration
  alerts:
    stages:
      - staging
      - prod
    topics:
      alarm: ${self:service}-${self:custom.stage}-alerts
    alarms:
      - functionErrors
      - functionThrottles
      - functionDuration
      - functionInvocations
    definitions:
      functionErrors:
        threshold: 5
        period: 300
      functionDuration:
        threshold: 30000
        period: 300
      functionThrottles:
        threshold: 1
        period: 60
      functionInvocations:
        threshold: 1000
        period: 300
  
  # Domain management
  customDomain:
    domainName: ${self:custom.domainNames.${self:custom.stage}}
    certificateName: ${self:custom.certificateNames.${self:custom.stage}}
    createRoute53Record: true
    endpointType: regional
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true
  
  domainNames:
    dev: api-dev.adaptivequiz.com
    staging: api-staging.adaptivequiz.com
    prod: api.adaptivequiz.com
  
  certificateNames:
    dev: "*.adaptivequiz.com"
    staging: "*.adaptivequiz.com"
    prod: "*.adaptivequiz.com"
  
  # Function warming
  warmup:
    enabled: ${self:custom.warmupEnabled.${self:custom.stage}}
    events:
      - schedule: 'rate(5 minutes)'
    timeout: 20
    prewarm: true
    concurrency: 1
    folderName: .warmup
  
  warmupEnabled:
    dev: false
    staging: true
    prod: true
  
  # Pruning configuration
  prune:
    automatic: true
    number: 5
  
  # Budget email configuration
  budgetEmail:
    dev: admin@adaptivequiz.com
    staging: admin@adaptivequiz.com
    prod: admin@adaptivequiz.com
  
  # API Gateway settings (for shared APIs)
  apiGateway:
    restApiId:
      dev: ''
      staging: ''
      prod: ''
    restApiRootResourceId:
      dev: ''
      staging: ''
      prod: ''

provider:
  name: aws
  runtime: python3.13
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  memorySize: ${self:custom.lambdaMemory.${self:custom.stage}, 256}
  timeout: ${self:custom.lambdaTimeout.${self:custom.stage}, 30}
  
  # Environment variables
  environment:
    STAGE: ${self:custom.stage}
    REGION: ${self:custom.region}
    LOG_LEVEL: ${self:custom.logLevel.${self:custom.stage}, 'INFO'}
    DYNAMODB_TABLE_PREFIX: ${self:custom.dynamodb.prefix}
    
    # DynamoDB table names
    USERS_TABLE: ${self:custom.dynamodb.prefix}-users
    QUESTIONS_TABLE: ${self:custom.dynamodb.prefix}-questions
    SESSIONS_TABLE: ${self:custom.dynamodb.prefix}-sessions
    PROGRESS_TABLE: ${self:custom.dynamodb.prefix}-progress
    WRONG_ANSWERS_TABLE: ${self:custom.dynamodb.prefix}-wrong-answers
    ANALYTICS_TABLE: ${self:custom.dynamodb.prefix}-analytics
    
    # Cognito configuration
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
    
    # API Gateway
    API_GATEWAY_URL: 
      Fn::Join:
        - ''
        - - 'https://'
          - Ref: ApiGatewayRestApi
          - '.execute-api.'
          - ${self:custom.region}
          - '.amazonaws.com/'
          - ${self:custom.stage}
    
    # Performance monitoring
    ENABLE_METRICS: true
    METRICS_NAMESPACE: AdaptiveQuiz/${self:custom.stage}
  
  # API Gateway configuration
  apiGateway:
    restApiId: ${self:custom.apiGateway.restApiId.${self:custom.stage}, ''}
    restApiRootResourceId: ${self:custom.apiGateway.restApiRootResourceId.${self:custom.stage}, ''}
    description: Adaptive Quiz Application API - ${self:custom.stage}
    binaryMediaTypes:
      - '*/*'
    minimumCompressionSize: 1024
    
  # Distributed tracing
  tracing:
    lambda: true
    apiGateway: true
  
  # CloudFormation tags
  tags:
    Project: adaptive-quiz-app
    Environment: ${self:custom.stage}
    Owner: ${self:custom.owner}
    CostCenter: ${self:custom.costCenter.${self:custom.stage}}
    Version: ${env:GITHUB_SHA, 'local'}
    CreatedBy: claude-code
    ManagedBy: serverless-framework
    Region: ${self:custom.region}
    
  # IAM permissions
  iam:
    role:
      statements:
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:ConditionCheckItem
          Resource:
            - "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb.prefix}-*"
            - "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb.prefix}-*/index/*"
        
        # Cognito permissions
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminConfirmSignUp
          Resource: !GetAtt CognitoUserPool.Arn
        
        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:custom.region}:*:*"
        
        # X-Ray tracing permissions
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"
        
        # CloudWatch metrics permissions
        - Effect: Allow
          Action:
            - cloudwatch:PutMetricData
          Resource: "*"
        
        # SSM Parameter Store permissions
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:GetParametersByPath
          Resource: "arn:aws:ssm:${self:custom.region}:*:parameter/adaptive-quiz/${self:custom.stage}/*"

# Plugins
plugins:
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-plugin-aws-alerts
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-plugin-warmup
  - serverless-offline  # Development only
  - serverless-dynamodb-local  # Development only

# Package configuration
package:
  patterns:
    - '!node_modules/**'
    - '!frontend/**'
    - '!docs/**'
    - '!tests/**'
    - '!.git/**'
    - '!.github/**'
    - '!*.md'
    - 'src/**'
    - 'requirements.txt'

# Lambda functions
functions:
  # Authentication Functions
  authRegister:
    handler: src.handlers.auth.register
    events:
      - http:
          path: auth/register
          method: post
          cors: true
    environment:
      JWT_SECRET: ${ssm:/adaptive-quiz/${self:custom.stage}/jwt-secret}
    layers:
      - !Ref PythonRequirementsLambdaLayer

  authLogin:
    handler: src.handlers.auth.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true
    environment:
      JWT_SECRET: ${ssm:/adaptive-quiz/${self:custom.stage}/jwt-secret}
    layers:
      - !Ref PythonRequirementsLambdaLayer
  
  authRefresh:
    handler: src.handlers.auth.refresh
    events:
      - http:
          path: auth/refresh
          method: post
          cors: true
    environment:
      JWT_SECRET: ${ssm:/adaptive-quiz/${self:custom.stage}/jwt-secret}
    layers:
      - !Ref PythonRequirementsLambdaLayer

  # Session Management Functions
  sessionCreate:
    handler: src.handlers.session.create_session_handler
    events:
      - http:
          path: sessions
          method: post
          cors: true
          authorizer:
            name: jwt-authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    layers:
      - !Ref PythonRequirementsLambdaLayer

  sessionGet:
    handler: src.handlers.session.get_session_handler
    events:
      - http:
          path: sessions/{sessionId}
          method: get
          cors: true
          authorizer:
            name: jwt-authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    layers:
      - !Ref PythonRequirementsLambdaLayer

  sessionUpdate:
    handler: src.handlers.session.update_session_handler
    events:
      - http:
          path: sessions/{sessionId}
          method: put
          cors: true
          authorizer:
            name: jwt-authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    layers:
      - !Ref PythonRequirementsLambdaLayer

  # Quiz Functions
  quizNextQuestion:
    handler: src.handlers.quiz.next_question_handler
    events:
      - http:
          path: sessions/{sessionId}/next-question
          method: post
          cors: true
          authorizer:
            name: jwt-authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    layers:
      - !Ref PythonRequirementsLambdaLayer

  quizSubmitAnswer:
    handler: src.handlers.quiz.submit_answer_handler
    events:
      - http:
          path: sessions/{sessionId}/submit-answer
          method: post
          cors: true
          authorizer:
            name: jwt-authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    timeout: 15
    layers:
      - !Ref PythonRequirementsLambdaLayer

  # Analytics Functions
  analyticsSession:
    handler: src.handlers.analytics.session_analytics_handler
    events:
      - http:
          path: analytics/sessions/{sessionId}
          method: get
          cors: true
          authorizer:
            name: jwt-authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    layers:
      - !Ref PythonRequirementsLambdaLayer

  analyticsUser:
    handler: src.handlers.analytics.user_analytics_handler
    events:
      - http:
          path: analytics/users/{userId}
          method: get
          cors: true
          authorizer:
            name: jwt-authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    layers:
      - !Ref PythonRequirementsLambdaLayer

  # Background Processing Functions
  processAnalytics:
    handler: src.handlers.background.process_analytics_handler
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: ${self:custom.scheduledFunctions.${self:custom.stage}}
    layers:
      - !Ref PythonRequirementsLambdaLayer

  cleanupSessions:
    handler: src.handlers.background.cleanup_sessions_handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: ${self:custom.scheduledFunctions.${self:custom.stage}}
    layers:
      - !Ref PythonRequirementsLambdaLayer

# CloudFormation resources
resources:
  - ${file(infrastructure/region-lock.yml)}
  - ${file(infrastructure/dynamodb.yml)}
  - ${file(infrastructure/cognito.yml)}
  - ${file(infrastructure/monitoring.yml)}
  - ${file(infrastructure/s3-website.yml)}
  - ${file(infrastructure/security.yml)}

# Outputs
outputs:
  ApiGatewayRestApiId:
    Value:
      Ref: ApiGatewayRestApi
    Export:
      Name: ${self:service}-${self:custom.stage}-api-gateway-id
  
  ApiGatewayRestApiRootResourceId:
    Value:
      Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
    Export:
      Name: ${self:service}-${self:custom.stage}-api-gateway-root-id
  
  ApiEndpoint:
    Value:
      Fn::Join:
        - ''
        - - 'https://'
          - Ref: ApiGatewayRestApi
          - '.execute-api.'
          - ${self:custom.region}
          - '.amazonaws.com/'
          - ${self:custom.stage}
    Export:
      Name: ${self:service}-${self:custom.stage}-api-endpoint
  
  CognitoUserPoolId:
    Value:
      Ref: CognitoUserPool
    Export:
      Name: ${self:service}-${self:custom.stage}-cognito-user-pool-id
  
  CognitoUserPoolArn:
    Value:
      Fn::GetAtt:
        - CognitoUserPool
        - Arn
    Export:
      Name: ${self:service}-${self:custom.stage}-cognito-user-pool-arn
