Resources:
  # S3 Bucket for Frontend Static Files
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:service}-${self:custom.stage}-frontend
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingS3Bucket
        LogFilePrefix: frontend-access-logs/
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
      Tags:
        - Key: Project
          Value: adaptive-quiz-app
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Purpose
          Value: Frontend hosting

  # S3 Bucket for Application Data and Backups
  DataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:service}-${self:custom.stage}-data
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
              KMSMasterKeyID: !Ref DataBucketKMSKey
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transition:
              Days: 30
              StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            Transition:
              Days: 90
              StorageClass: GLACIER
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 365
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DataProcessingFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: exports/
                  - Name: suffix
                    Value: .json
      Tags:
        - Key: Project
          Value: adaptive-quiz-app
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Purpose
          Value: Data storage and backups

  # S3 Bucket for Access Logs
  LoggingS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:service}-${self:custom.stage}-logs
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays:
              Fn::If:
                - IsProduction
                - 365
                - 90
      Tags:
        - Key: Project
          Value: adaptive-quiz-app
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Purpose
          Value: Access logging

  # KMS Key for Data Bucket Encryption
  DataBucketKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Adaptive Quiz data bucket encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key for S3
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'

  DataBucketKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/${self:service}-${self:custom.stage}-data-bucket
      TargetKeyId: !Ref DataBucketKMSKey

  # CloudFront Origin Access Identity for Frontend Bucket
  FrontendCloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: OAI for ${self:service}-${self:custom.stage} frontend bucket

  # S3 Bucket Policy for CloudFront Access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${FrontendCloudFrontOAI}'
            Action: s3:GetObject
            Resource: !Sub '${FrontendS3Bucket}/*'
          - Sid: DenyDirectAccess
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !GetAtt FrontendS3Bucket.Arn
              - !Sub '${FrontendS3Bucket}/*'
            Condition:
              StringNotEquals:
                'AWS:SourceArn': !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${FrontendCloudFrontOAI}'

  # Lambda Function for Data Processing
  DataProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ${self:service}-${self:custom.stage}-data-processing
      Runtime: python3.13
      Handler: index.handler
      Role: !GetAtt DataProcessingFunctionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
              logger.info(f"Processing S3 event: {json.dumps(event)}")
              
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  
                  logger.info(f"Processing file: s3://{bucket}/{key}")
                  
                  # Add your data processing logic here
                  # For example: validate JSON, transform data, trigger workflows
                  
              return {
                  'statusCode': 200,
                  'body': json.dumps('Data processing completed')
              }
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          STAGE: ${self:custom.stage}
          DATA_BUCKET: !Ref DataS3Bucket

  # IAM Role for Data Processing Function
  DataProcessingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-${self:custom.stage}-data-processing-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${DataS3Bucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataS3Bucket.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource:
                  - !GetAtt DataBucketKMSKey.Arn

  # Lambda Permission for S3 to invoke function
  DataProcessingFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataProcessingFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt DataS3Bucket.Arn

  # CloudWatch Log Group for S3 events
  S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/s3/${self:service}-${self:custom.stage}
      RetentionInDays:
        Fn::If:
          - IsProduction
          - 30
          - 14

Conditions:
  IsProduction:
    Fn::Equals:
      - ${self:custom.stage}
      - prod

Outputs:
  FrontendS3BucketName:
    Value: !Ref FrontendS3Bucket
    Export:
      Name: ${self:service}-${self:custom.stage}-frontend-bucket

  FrontendS3BucketArn:
    Value: !GetAtt FrontendS3Bucket.Arn
    Export:
      Name: ${self:service}-${self:custom.stage}-frontend-bucket-arn

  DataS3BucketName:
    Value: !Ref DataS3Bucket
    Export:
      Name: ${self:service}-${self:custom.stage}-data-bucket

  DataS3BucketArn:
    Value: !GetAtt DataS3Bucket.Arn
    Export:
      Name: ${self:service}-${self:custom.stage}-data-bucket-arn

  LoggingS3BucketName:
    Value: !Ref LoggingS3Bucket
    Export:
      Name: ${self:service}-${self:custom.stage}-logs-bucket

  FrontendCloudFrontOAI:
    Value: !Ref FrontendCloudFrontOAI
    Export:
      Name: ${self:service}-${self:custom.stage}-cloudfront-oai

  DataBucketKMSKeyId:
    Value: !Ref DataBucketKMSKey
    Export:
      Name: ${self:service}-${self:custom.stage}-data-kms-key-id

  DataBucketKMSKeyArn:
    Value: !GetAtt DataBucketKMSKey.Arn
    Export:
      Name: ${self:service}-${self:custom.stage}-data-kms-key-arn